//C#  accepted soltuion
public class Solution {
    public bool HasAllCodes(string s, int k)
    {
      int need = 1 << k;
        bool[] got = new bool[need];
        int allOne = need - 1;
        int hashVal = 0;

        for (int i = 0; i < s.Length; i++) {
            // calculate hash for s.substr(i-k+1,i+1)
            hashVal = ((hashVal << 1) & allOne) | (s[i] - '0');
            // hash only available when i-k+1 > 0
            if (i >= k - 1 && !got[hashVal]) {
                got[hashVal] = true;
                need--;
                if (need == 0) {
                    return true;
                }
            }
        }
        return false;
    }
}


//my solution.not fast enough fails.
public class Solution {
    public bool HasAllCodes(string s, int k)
    {
  List<string> mylist = new List<string>();
        int limit = Convert.ToInt32(Math.Pow(2,k));

    for(int i=0;i<limit;i++)
    {
        string binary = Convert.ToString(i, 2);

         if (binary.Length < k)
        {
            int number=k-binary.Length;
            binary= binary.PadLeft(number+1,'0');
           // Console.Out.WriteLine("binary length is "+binary.Length+" binary is "+binary+" padding number is "+number);
        }

        mylist.Add(binary);

    }

    int count=0;
    foreach(string myitem in mylist)
    {
        if(s.Contains(myitem))
        count++;
    }

    if(count != limit)
    return false;

   //Console.Out.WriteLine(count);


        return true;
    }
}

/*
"000011010111011001001111111001000100100100010100101100001101101101110001100100101111100111001001111001001010111010010101101001001110011100110101001001001000000110101001010011101100110110100010000"
7
"01001000100111101001010101110100010001011100011100100101010000001101010101110100100011010110101000011111111111101000010010000001000111111001110010000001011010001110100010001010001110010111011010110101110110110011010001001000110001101010101010111011111000010110101101100010000001001110000000000001100110111001011010100101001011111110010010001100011100101110111001100101001011100001110"
7
"0000000001011100"
4
"1011110111001001101001110001100111101111010101011100111001110010010001000111010110101110000110101001011100100010100110011101011110001000100010101101011"
20
"0110"
2
"00101101001010110011000110010101100011001110000111010111101001000011101001111100111000011010101011011100100101101111001110111100010111000001010101011001010100101011001011101110110111101110000011110111111101000110101111001000001000110000011110001101011101001111111111110101111110011011111101101000111110001111110011100101101000110000010100010101100011100110100111111001110100001011100001100110011001001101000111000110000100111011011"
20

*/
