boolean isCryptSolution(String[] crypt, char[][] solution) {
    String[] values = new String[crypt.length];

    // iterate through the crypt
    for (int i = 0; i < crypt.length; i++) {
        char[] word = crypt[i].toCharArray();
        // ensure there is actually a word
        if (word.length == 0) return false;

        values[i] = "";
        // iterate through the crypt word
        for (int x = 0; x < word.length; x++) {
            // set the variable in the values array to the mapped value
            values[i] += GetMappedCharacter(word[x], solution);
        }
    }

    // ensure we have no leading zeros
    if (HasLeadingZero(values[0]) || HasLeadingZero(values[1]) || HasLeadingZero(values[2])) return false;

    // ensure we meet the word[1] + word[2] = word[3] restriction
    return Long.parseLong(values[0]) + Long.parseLong(values[1]) == Long.parseLong(values[2]);
}

boolean HasLeadingZero(String value) {
    char[] chars = value.toCharArray();
    if (chars.length > 1 && chars[0] == '0') return true;
    if (chars.length == 0) return true;
    return false;
}

char GetMappedCharacter(char c, char[][] map) {
    // check the map for the corresponding value
    for (int i = 0; i < map.length; i++) {
        if (map[i][0] == c) {
            return map[i][1];
        }
    }
    return '0';
}

/*

//https://app.codesignal.com/interview-practice/task/yM4uWYeQTHzYewW9H

Test 1
Input:

crypt:
["SEND",
 "MORE",
 "MONEY"]
solution:
[["O","0"],
 ["M","1"],
 ["Y","2"],
 ["E","5"],
 ["N","6"],
 ["D","7"],
 ["R","8"],
 ["S","9"]]

Expected Output:

true
------------
Test 2
Input:

crypt:
["TEN",
 "TWO",
 "ONE"]
solution:
[["O","1"],
 ["T","0"],
 ["W","9"],
 ["E","5"],
 ["N","4"]]

Expected Output:

false
------------
Test 5
Input:

crypt:
["A",
 "A",
 "A"]
solution: [["A","0"]]

Expected Output:

true
------------

Test 9
Input:

crypt:
["AA",
 "AA",
 "BB"]
solution:
[["A","1"],
 ["B","2"]]

Expected Output:
----------------
*/