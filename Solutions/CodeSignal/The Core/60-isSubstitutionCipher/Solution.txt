//Custom solution -- passes complete
boolean isSubstitutionCipher1(String string1, String string2) {

HashMap<Character,Character> Items = new HashMap<>();

//Item catalogging
for(int i=0;i<string1.length();i++)
{
    if(!Items.containsKey(string1.charAt(i)))
    {
        Items.put(string1.charAt(i), string2.charAt(i));
    }

}
        //Duplicate Value Check
		for (Map.Entry<Character, Character> entry : Items.entrySet())
        {		   int counter=0;
           	for (Map.Entry<Character, Character> entry2 : Items.entrySet())
        {
            if(entry.getValue() == entry2.getValue())
		             counter++;
		}

        if(counter>1)
        return false;
	}

         for(int i=0;i<string1.length();i++)
        {
        if (Items.get(string1.charAt(i)) != string2.charAt(i))
        return false;
        }


return true;
}
//Much more elegant solution

boolean isSubstitutionCipher2(String string1, String string2) {
  // once a letter is assigned, must be used for same
  Map<Character, Character> map = new HashMap<Character, Character>();
  for (int i = 0; i<string1.length(); i++) {
    Character key = string1.charAt(i);
    Character val = string2.charAt(i);
    if (!map.containsKey(key)) {
      // already mapped to a different key
      if (map.containsValue(val)) return false;
      map.put(key, val);
    } else {
      if (!map.get(key).equals(val)) return false;
    }
  }
  return true;
}
