----------------------
// Singly-linked lists are already defined with this interface:
// class ListNode<T> {
//   ListNode(T x) {
//     value = x;
//   }
//   T value;
//   ListNode<T> next;
// }
//
ListNode<Integer> removeKFromList(ListNode<Integer> l, int k) {
    if (l == null) {
        return null;
    }

    ListNode<Integer> firstNode = null;
    ListNode<Integer> currentNode = null;
    ListNode<Integer> lastNode = null;

    ListNode<Integer> current = l;

    // iterate through the list, searching for the value k
    while (true) {
        if (current.value != k) {
            // since this node isnt k, set our variables and proceed on
            // set currentNode
            currentNode = current;
            // the set the previous nodes next = this node
            if (lastNode != null) lastNode.next = currentNode;
            // set lastNode to this current node
            lastNode = currentNode;
            // set the first node if it hasnt been set
            if (firstNode == null) firstNode = currentNode;
        }

        // when we hit the end, bail out.
        if (current.next == null) break;
        ListNode<Integer> next = current.next;
        current.next = null;
        current = next;

    }

    return firstNode;
}
-------------------------
// Singly-linked lists are already defined with this interface:
// class ListNode<T> {
//   ListNode(T x) {
//     value = x;
//   }
//   T value;
//   ListNode<T> next;
// }
//
// Definition for singly-linked list:
// class ListNode<T> {
//   ListNode(T x) {
//     value = x;
//   }
//   T value;
//   ListNode<T> next;
// }
//
boolean isListPalindrome(ListNode<Integer> l) {
    // 1. Move
    ListNode slow = l, fast = l;
    while(fast != null && fast.next != null){
        slow = slow.next;
        fast = fast.next.next;
    }

    // linked list has odd length
    if(fast!=null){
        slow = slow.next;
    }

    // 2. Reverse second half of linked list and move slow pointer to the 2nd head
    slow = reverse(slow);
    fast = l;
    // 3. Compare
    while(slow!=null){

        if(!fast.value.equals(slow.value)){
            System.out.println(slow.value);
            System.out.println(fast.value);
            return false;
        }
        fast = fast.next;
        slow = slow.next;
    }
    return true;
}

public ListNode reverse(ListNode<Integer> head){
    ListNode prev = null;
    while(head!=null){
        ListNode next = head.next;
        head.next = prev;
        prev = head;
        head = next;
    }
    return prev;
}

	------------------------------------------
	addTwoHugeNumbers
	// Singly-linked lists are already defined with this interface:
    // class ListNode<T> {
    //   ListNode(T x) {
    //     value = x;
    //   }
    //   T value;
    //   ListNode<T> next;
    // }
    //
    ListNode<Integer> addTwoHugeNumbers(ListNode<Integer> a, ListNode<Integer> b) {
    	    ListNode<Integer> result = new ListNode<Integer>(0);
    	    ListNode<Integer> head = result;
    	    int carry=0;
    	    a= reverse(a);
    	    b= reverse(b);
    	    while(a!=null || b!=null){
    	        if(a!=null){
    	            carry+= a.value;
    	            a=a.next;
    	        }
    	        if(b!=null){
    	            carry+=b.value;
    	            b= b.next;
    	        }
    	        head.next = new ListNode<Integer>(carry%10000);
    	        head = head.next;
    	        carry = carry/10000;
    	    }
    	    if(carry>=1)
    	        head.next= new ListNode<Integer>(carry);

    	    return reverse(result.next);

    	}

    	ListNode<Integer> reverse(ListNode<Integer> head){
    	    ListNode<Integer> prev =null;
    	    while(head!=null){
    	        ListNode<Integer> temp = head.next;
    	        head.next= prev;
    	        prev= head;
    	        head= temp;
    	    }
    	    return prev;
    	}
-----------------------------------------------------------------
Note: Your solution should have O(l1.length + l2.length) time complexity, since this is what you will be asked to accomplish in an interview.

Given two singly linked lists sorted in non-decreasing order, your task is to merge them. In other words, return a singly linked list, also sorted in non-decreasing order, that contains the elements from both original lists.

Example

    For l1 = [1, 2, 3] and l2 = [4, 5, 6], the output should be
    mergeTwoLinkedLists(l1, l2) = [1, 2, 3, 4, 5, 6];
    For l1 = [1, 1, 2, 4] and l2 = [0, 3, 5], the output should be
    mergeTwoLinkedLists(l1, l2) = [0, 1, 1, 2, 3, 4, 5].
-----------------------------------------------------------------
ListNode<Integer> mergeTwoLinkedLists(ListNode<Integer> l1, ListNode<Integer> l2) {
    ListNode<Integer> solu = new ListNode<Integer>(0);
    ListNode<Integer> head = solu;
    if(l1 == null && l2 != null){
        return l2;
    }
    if(l1 != null && l2 == null){
        return l1;
    }
    if(l1 == null && l2 == null){
        return l1;
    }
    while(!(l1 == null && l2 == null)){
        ListNode<Integer> tmp = new ListNode<Integer>(0);
        if(l1 != null && l2 == null){
            solu.value = l1.value;
            if(l1.next != null){
                solu.next = tmp;
                solu = solu.next;
            }
            l1 = l1.next;
        }
        else if(l1 == null && l2 != null){
            solu.value = l2.value;
            if(l2.next != null){
                solu.next = tmp;
                solu = solu.next;
            }
            l2 = l2.next;
        }
        else if(l1.value <= l2.value){
            solu.value = l1.value;
            solu.next = tmp;
            solu = solu.next;
            l1 = l1.next;
        }
        else if(l1.value > l2.value){
            solu.value = l2.value;
            solu.next = tmp;
            solu = solu.next;
            l2 = l2.next;
        }
    }
    return head;
}
-----------------------------------------------------------------
Note: Your solution should have O(n) time complexity, where n is the number of elements in l, and O(1) additional space complexity, since this is what you would be asked to accomplish in an interview.

Given a linked list l, reverse its nodes k at a time and return the modified list. k is a positive integer that is less than or equal to the length of l. If the number of nodes in the linked list is not a multiple of k, then the nodes that are left out at the end should remain as-is.

You may not alter the values in the nodes - only the nodes themselves can be changed.

Example

    For l = [1, 2, 3, 4, 5] and k = 2, the output should be
    reverseNodesInKGroups(l, k) = [2, 1, 4, 3, 5];
    For l = [1, 2, 3, 4, 5] and k = 1, the output should be
    reverseNodesInKGroups(l, k) = [1, 2, 3, 4, 5];
    For l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] and k = 3, the output should be
    reverseNodesInKGroups(l, k) = [3, 2, 1, 6, 5, 4, 9, 8, 7, 10, 11].

-----------------------------------------------------------------
// Singly-linked lists are already defined with this interface:
// class ListNode<T> {
//   ListNode(T x) {
//     value = x;
//   }
//   T value;
//   ListNode<T> next;
// }
//
ListNode<Integer> reverseNodesInKGroups(ListNode<Integer> l, int k) {
    if(l == null){
        return l;
    }
    ListNode<Integer> tmp = new ListNode<Integer>(0);
    tmp.next = l;
    ListNode<Integer> prev = tmp;
    int i = 0;
    ListNode<Integer> x = l;
    while(x != null){
        i++;
        if(i%k == 0){
            prev = reverse(prev, x.next);
            x = prev.next;
        }
        else{
            x = x.next;
        }
    }
    return tmp.next;
}

ListNode<Integer> reverse(ListNode<Integer> l, ListNode<Integer> j){
    ListNode<Integer> tmp = l.next;
    ListNode<Integer> curr = tmp.next;
    while(curr != j){
        tmp.next = curr.next;
        curr.next = l.next;
        l.next = curr;
        curr = tmp.next;
    }

    return tmp;
}
-----------------------------------------------------------------
Note: Try to solve this task in O(list size) time using O(1) additional space, since this is what you'll be asked during an interview.

Given a singly linked list of integers l and a non-negative integer n, move the last n list nodes to the beginning of the linked list.

Example

    For l = [1, 2, 3, 4, 5] and n = 3, the output should be
    rearrangeLastN(l, n) = [3, 4, 5, 1, 2];
    For l = [1, 2, 3, 4, 5, 6, 7] and n = 1, the output should be
    rearrangeLastN(l, n) = [7, 1, 2, 3, 4, 5, 6].

-----------------------------------------------------------------
// Singly-linked lists are already defined with this interface:
// class ListNode<T> {
//   ListNode(T x) {
//     value = x;
//   }
//   T value;
//   ListNode<T> next;
// }
//
ListNode<Integer> rearrangeLastN(ListNode<Integer> l, int n) {
	    if(l==null || n==0) return l;
	    ListNode<Integer> temp = l;
	    int len=1;
	    while(temp.next!=null){
	        temp= temp.next;
	        len++;
	    }
	    temp.next = l;
	    n= n%len;
	    for(int i=0; i<(len-n); i++){
	        temp= temp.next;
	    }
	    l= temp.next;
	    temp.next=null;
	    return l;
	}
---------------------------------------